import Rx from 'rxjs/Rx'
import { createSubscriber } from './lib/util'

// const simple$ = new Rx.Subject()
// simple$.subscribe(createSubscriber('subject'))
// simple$.next('one')
// simple$.next('two')
// simple$.complete()

// const interval$ = Rx.Observable.interval(500).take(3)
// const subject$ = new Rx.Subject()
// interval$.subscribe(subject$)
// subject$.subscribe(createSubscriber('sub1'))
// subject$.subscribe(createSubscriber('sub2'))
// subject$.subscribe(createSubscriber('sub3'))
// setTimeout(() => subject$.subscribe(createSubscriber('Look at me')), 1000)

// const currentUser$ = new Rx.Subject()
// const isLoggedIn$ = currentUser$.map(u => u.isLoggedIn)
// isLoggedIn$.subscribe(createSubscriber('one'))
// currentUser$.next({ isLoggedIn: false })
// isLoggedIn$.subscribe(createSubscriber('two'))
// setTimeout(() => currentUser$.next({ isLoggedIn: true }), 500)
// setTimeout(() => isLoggedIn$.subscribe(createSubscriber('delayed')), 250)

// const currentUser$ = new Rx.BehaviorSubject({ isLoggedIn: false })
// const isLoggedIn$ = currentUser$.map(u => u.isLoggedIn)
// isLoggedIn$.subscribe(createSubscriber('one'))
// currentUser$.next({ isLoggedIn: false })
// isLoggedIn$.subscribe(createSubscriber('two'))
// setTimeout(() => currentUser$.next({ isLoggedIn: true }), 500)
// setTimeout(() => isLoggedIn$.subscribe(createSubscriber('delayed')), 250)

// const replay$ = new Rx.ReplaySubject(3)
// replay$.next(1)
// replay$.next(2)
// replay$.subscribe(createSubscriber('one'))
// replay$.next(3)
// replay$.next(4)
// replay$.next(5)
// replay$.subscribe(createSubscriber('two'))
// replay$.next(6)

const apiCall$ = new Rx.AsyncSubject()
apiCall$.next(1)
apiCall$.subscribe(createSubscriber('one'))
apiCall$.next(2)
apiCall$.complete()
setTimeout(() => apiCall$.subscribe(createSubscriber('two')), 500)
